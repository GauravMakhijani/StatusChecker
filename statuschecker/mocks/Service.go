// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	db "StatusChecker/db"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Append provides a mock function with given fields: ctx, website
func (_m *Service) Add(ctx context.Context, website db.WebsiteStatus) error {
	ret := _m.Called(ctx, website)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.WebsiteStatus) error); ok {
		r0 = rf(ctx, website)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckStatus provides a mock function with given fields: _a0
func (_m *Service) CheckStatus(_a0 *time.Ticker) {
	_m.Called(_a0)
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]db.WebsiteStatus, error) {
	ret := _m.Called(ctx)

	var r0 []db.WebsiteStatus
	if rf, ok := ret.Get(0).(func(context.Context) []db.WebsiteStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WebsiteStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimilar provides a mock function with given fields: ctx, name
func (_m *Service) GetSimilar(ctx context.Context, name string) ([]db.WebsiteStatus, error) {
	ret := _m.Called(ctx, name)

	var r0 []db.WebsiteStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) []db.WebsiteStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WebsiteStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, url
func (_m *Service) GetStatus(ctx context.Context, url string) string {
	ret := _m.Called(ctx, url)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
