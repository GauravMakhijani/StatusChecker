// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	db "StatusChecker/db"

	mock "github.com/stretchr/testify/mock"
)

// StatusStorer is an autogenerated mock type for the StatusStorer type
type StatusStorer struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *StatusStorer) GetAll() ([]db.WebsiteStatus, error) {
	ret := _m.Called()

	var r0 []db.WebsiteStatus
	if rf, ok := ret.Get(0).(func() []db.WebsiteStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WebsiteStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebsiteStatus provides a mock function with given fields: name
func (_m *StatusStorer) GetWebsiteStatus(name string) ([]db.WebsiteStatus, error) {
	ret := _m.Called(name)

	var r0 []db.WebsiteStatus
	if rf, ok := ret.Get(0).(func(string) []db.WebsiteStatus); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.WebsiteStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertWebsite provides a mock function with given fields: website
func (_m *StatusStorer) InsertWebsite(website db.WebsiteStatus) error {
	ret := _m.Called(website)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.WebsiteStatus) error); ok {
		r0 = rf(website)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWebsiteStatus provides a mock function with given fields: url, status
func (_m *StatusStorer) UpdateWebsiteStatus(url string, status string) error {
	ret := _m.Called(url, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStatusStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatusStorer creates a new instance of StatusStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatusStorer(t mockConstructorTestingTNewStatusStorer) *StatusStorer {
	mock := &StatusStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
